# bot/main.py
import time
import joblib
import pandas as pd
from datetime import datetime
from shared.okx_api import get_btc_usdt_candles
from bot.risk import calculate_position_size, get_tp_sl_levels
from okx import OkxRestClient

client = OkxRestClient(API_KEY="–≤–∞—à_–∫–ª—é—á", API_SECRET="–≤–∞—à_—Å–µ–∫—Ä–µ—Ç", PASSPHRASE="–≤–∞—à_–ø–∞—Ä–æ–ª—å")
MODEL_FILE = "data/models/btc_usdt_ensemble.pkl"

def should_trade():
    if not os.path.exists(MODEL_FILE):
        return False
    mod_time = datetime.fromtimestamp(os.path.getmtime(MODEL_FILE))
    if datetime.now() - mod_time > timedelta(hours=4):
        return False
    return True

def trading_loop():
    while True:
        if not should_trade():
            print("üõë –ú–æ–¥–µ–ª—å –Ω–µ –≤–∞–ª–∏–¥–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ...")
            time.sleep(300)
            continue
        try:
            candles = get_btc_usdt_candles(datetime.now() - timedelta(hours=1), datetime.now(), "3m")
            if not candles:
                time.sleep(60)
                continue
            df = pd.DataFrame(candles)
            df['return'] = df['close'].pct_change()
            df['sma_5'] = df['close'].rolling(5).mean()
            df['rsi'] = (df['close'].diff(1).clip(lower=0).rolling(14).mean()) / \
                        (df['close'].diff(1).abs().rolling(14).mean()) * 100
            latest = df[['return', 'sma_5', 'rsi']].dropna().iloc[-1:].values
            model = joblib.load(MODEL_FILE)
            prob = model.predict_proba(latest)[0][1]
            price = df.iloc[-1]['close']
            print(f"üìä [LONG] –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {prob:.2f}, –¶–µ–Ω–∞: {price}")
            if prob > 0.6:
                size = calculate_position_size(1000, price)
                tp_sl = get_tp_sl_levels(price)
                # client.trade.place_order(...)
                print(f"üìà –ü–æ–∫—É–ø–∞–µ–º {size:.6f} BTC –ø–æ {price}")
            time.sleep(180)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            time.sleep(60)