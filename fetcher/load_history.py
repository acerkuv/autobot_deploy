# fetcher/load_history.py
import ccxt
import pandas as pd
import time
from datetime import datetime, timedelta
import os

def fetch_binance_candles(symbol, timeframe, days_back=200):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ —Å Binance —á–µ—Ä–µ–∑ ccxt.
    """
    exchange = ccxt.binance({
        'enableRateLimit': True,
        'options': {'defaultType': 'spot'}
    })

    # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º timestamp 200 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    since_date = datetime.utcnow() - timedelta(days=days_back)
    since = exchange.parse8601(since_date.strftime("%Y-%m-%dT%H:%M:%S.%fZ"))
    end_time = exchange.milliseconds()
    all_candles = []

    print(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ {days_back} –¥–Ω–µ–π {symbol} {timeframe} —Å Binance")

    while since < end_time:
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 1000 —Å–≤–µ—á–µ–π –∑–∞ —Ä–∞–∑
            candles = exchange.fetch_ohlcv(symbol, timeframe, since=since, limit=1000)
            if not candles:
                break

            all_candles.extend(candles)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ: {len(all_candles)})")

            # –û–±–Ω–æ–≤–ª—è–µ–º `since` –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
            since = candles[-1][0] + exchange.parse_timeframe(timeframe) * 1000

            # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç—ã
            time.sleep(exchange.rateLimit / 1000)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            break

    if not all_candles:
        return pd.DataFrame()

    # –°–æ–∑–¥–∞—ë–º DataFrame
    df = pd.DataFrame(all_candles, columns=['timestamp_ms', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp_ms'], unit='ms')
    df['instrument'] = symbol
    df['timeframe'] = timeframe

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    df = df.drop_duplicates(subset=['timestamp_ms']).sort_values('timestamp_ms').reset_index(drop=True)

    return df

def save_to_parquet(df, filepath):
    os.makedirs(os.path.dirname(filepath), exist_ok=True)
    df.to_parquet(filepath, index=False)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –≤ {filepath}")

if __name__ == "__main__":
    SYMBOL = "BTC/USDT"
    TIMEFRAMES = ["15m", "1h", "4h"]
    DAYS_BACK = 200

    for tf in TIMEFRAMES:
        df = fetch_binance_candles(SYMBOL, tf, DAYS_BACK)
        if not df.empty:
            filepath = f"./data/processed/btc_usdt_{tf}.parquet"
            save_to_parquet(df, filepath)