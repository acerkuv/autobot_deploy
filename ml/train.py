# ml/train.py
import pandas as pd
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.metrics import (
    accuracy_score,
    precision_score,
    recall_score,
    roc_auc_score  # ‚úÖ –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
)
from sklearn.model_selection import train_test_split
import joblib
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df_3m = pd.read_parquet("./data/processed/btc_usdt_3m.parquet")
df_1h = pd.read_parquet("./data/processed/btc_usdt_1h.parquet")

print(" –û–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è XGBoost + LightGBM...")

# –†–∞–±–æ—Ç–∞–µ–º —Å 3m –¥–∞–Ω–Ω—ã–º–∏
df = df_3m.copy()

# –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: –±—É–¥–µ—Ç –ª–∏ —Ä–æ—Å—Ç —á–µ—Ä–µ–∑ 12 —Å–≤–µ—á–µ–π (36 –º–∏–Ω—É—Ç)?
df['future_close'] = df['close'].shift(-12)
df['target'] = (df['future_close'] > df['close'] * 1.002).astype(int)  # –°–º—è–≥—á–∏–ª –¥–æ +0.2%

# === –†–∞—Å—á—ë—Ç —Ñ–∏—á–µ–π ===
df['sma_20'] = df['close'].rolling(20).mean()
df['sma_50'] = df['close'].rolling(50).mean()
df['volatility'] = df['high'] - df['low']
df['momentum'] = df['close'] - df['close'].shift(5)
df['volume_ma'] = df['volume'].rolling(10).mean()
df['volume_ratio'] = df['volume'] / (df['volume_ma'] + 1e-8)

# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN
df.dropna(inplace=True)

# –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏—á–∏
features = [
    'close', 'volume', 'sma_20', 'sma_50', 'volatility',
    'momentum', 'volume_ratio'
]
X = df[features]
y = df['target']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤)
split_idx = len(X) - 240  # ~12 —á–∞—Å–æ–≤
X_train, X_val = X[:split_idx], X[split_idx:]
y_train, y_val = y[:split_idx], y[split_idx:]

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ LONG –≤ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
if y_train.sum() == 0:
    raise ValueError("‚ùå –ù–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫ (LONG) –≤ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ")

# === –í–µ—Å –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤ ===
pos_weight = len(y_train) / y_train.sum()
print(f"‚öñÔ∏è  –í–µ—Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞: {pos_weight:.1f}")

# === –ú–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω—Å–∞–º–±–ª—è ===
xgb = XGBClassifier(n_estimators=100, random_state=42)
lgb = LGBMClassifier(
    n_estimators=100,
    random_state=42,
    scale_pos_weight=pos_weight,
    min_child_samples=20,  # ‚Üê –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    objective='binary',
    metric='binary_logloss'
)

# === –ê–Ω—Å–∞–º–±–ª—å ===
model = VotingClassifier([('xgb', xgb), ('lgb', lgb)], voting='soft')

# === –û–±—É—á–µ–Ω–∏–µ ===
model.fit(X_train, y_train)

# === –í–∞–ª–∏–¥–∞—Ü–∏—è ===
y_pred = model.predict(X_val)
y_pred_proba = model.predict_proba(X_val)[:, 1]

acc = accuracy_score(y_val, y_pred)
prec = precision_score(y_val, y_pred, zero_division=0)
rec = recall_score(y_val, y_pred, zero_division=0)
auc = roc_auc_score(y_val, y_pred_proba)

print(f"üìä –í–∞–ª–∏–¥–∞—Ü–∏—è: Acc={acc:.3f}, Prec={prec:.3f}, Rec={rec:.3f}, AUC={auc:.3f}")

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
os.makedirs("./models", exist_ok=True)
joblib.dump(model, "./models/btc_long_model.pkl")
print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")