# models/model.py
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import joblib
import os

def train_model(df_3m, df_1h):
    """
    –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö 3m –∏ 1h.
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ 3m –∏ 1h –¥–∞–Ω–Ω—ã—Ö...")

    # –†–∞–±–æ—Ç–∞–µ–º —Å 3m –¥–∞–Ω–Ω—ã–º–∏
    df = df_3m.copy()

    # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: –±—É–¥–µ—Ç –ª–∏ —Ä–æ—Å—Ç —á–µ—Ä–µ–∑ 12 —Å–≤–µ—á–µ–π (36 –º–∏–Ω—É—Ç)?
    df['future_close'] = df['close'].shift(-12)
    df['target'] = (df['future_close'] > df['close'] * 1.005).astype(int)  # +0.5%

    # –§–∏—á–∏
    df['sma_20'] = df['close'].rolling(20).mean()
    df['sma_50'] = df['close'].rolling(50).mean()
    df['volatility'] = df['high'] - df['low']
    df['momentum'] = df['close'] - df['close'].shift(5)
    df['volume_ma'] = df['volume'].rolling(10).mean()
    df['volume_ratio'] = df['volume'] / df['volume_ma']

    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏—á–∏
    feature_columns = [
        'close', 'volume', 'sma_20', 'sma_50', 'volatility',
        'momentum', 'volume_ratio'
    ]

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN
    df.dropna(subset=feature_columns + ['target'], inplace=True)

    X = df[feature_columns]
    y = df['target']

    if len(y) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
        return None

    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    model = RandomForestClassifier(n_estimators=100, random_state=42, n_jobs=-1)
    model.fit(X, y)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    os.makedirs("models", exist_ok=True)
    joblib.dump(model, "models/btc_long_model.pkl")
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ {len(X)} —Å–≤–µ—á–∞—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ models/btc_long_model.pkl")

    return model